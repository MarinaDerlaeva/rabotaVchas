CREATE DATABASE IF NOT EXISTS orders_db;
USE DATABASE orders_db;

CREATE SCHEMA IF NOT EXISTS orders_schema;
USE SCHEMA orders_schema;


CREATE OR REPLACE FILE FORMAT json_file_format
  TYPE = 'JSON'
  STRIP_OUTER_ARRAY = TRUE
  IGNORE_UTF8_ERRORS = TRUE;


  CREATE OR REPLACE STAGE raw_data_stage
  FILE_FORMAT = json_file_format
  COMMENT = 'Стейдж за качване на JSON файлове с поръчки и клиенти';


  USE DATABASE orders_db;
USE SCHEMA orders_schema;


snowsql -q "PUT file:///path/to/customers.json @raw_data_stage AUTO_COMPRESS=TRUE;"
snowsql -q "PUT file:///path/to/orders.json @raw_data_stage AUTO_COMPRESS=TRUE;"


CREATE OR REPLACE TABLE raw_customers_json (
  raw VARIANT
);

CREATE OR REPLACE TABLE raw_orders_json (
  raw VARIANT
);




CREATE OR REPLACE TABLE td_customers (
  customer_id STRING PRIMARY KEY,
  first_name STRING,
  last_name STRING,
  email STRING,
  registration_date DATE
);


CREATE OR REPLACE TABLE td_orders (
  order_id STRING PRIMARY KEY,
  customer_id STRING,
  order_date DATE,
  total_amount NUMBER(10,2)
);

CREATE OR REPLACE TABLE td_order_items (
  order_item_id STRING PRIMARY KEY,
  order_id STRING,
  product_id STRING,
  quantity INT,
  price NUMBER(10,2)
);


COPY INTO raw_customers_json(raw)
FROM @raw_data_stage/customers.json
FILE_FORMAT = (FORMAT_NAME = 'customers_data.json');

COPY INTO raw_orders_json(raw)
FROM @raw_data_stage/orders.json
FILE_FORMAT = (FORMAT_NAME = 'orders_data.json');

CREATE SCHEMA ORDERS_DB.CUSTOMERS_DATA;


INSERT INTO td_customers (customer_id, first_name, last_name, email, registration_date)
SELECT
  raw:id::STRING AS customer_id,
  raw:first_name::STRING,
  raw:last_name::STRING,
  raw:email::STRING,
  TO_DATE(raw:registration_date::STRING, 'YYYY-MM-DD') AS registration_date
FROM raw_customers_json;


INSERT INTO td_orders (order_id, customer_id, order_date, total_amount)
SELECT
  raw:order_id::STRING,
  raw:customer_id::STRING,
  TO_DATE(raw:order_date::STRING, 'YYYY-MM-DD'),
  raw:total_amount::NUMBER(10,2)
FROM raw_orders_json;


INSERT INTO td_order_items (order_item_id, order_id, product_id, quantity, price)
SELECT
  item.value:item_id::STRING,
  raw:order_id::STRING,
  item.value:product_id::STRING,
  item.value:quantity::INT,
  item.value:price::NUMBER(10,2)
FROM raw_orders_json,
LATERAL FLATTEN(input => raw:items) item;



CREATE OR REPLACE TABLE customer_registration_agg AS
SELECT
  CURRENT_DATE() AS as_of_date,
  COUNT(*) AS total_customers_registered
FROM td_customers;



CREATE OR REPLACE TABLE sales_agg AS
SELECT
  SUM(quantity) AS total_products_sold,
  SUM(quantity * price) AS total_revenue
FROM td_order_items;


DROP TABLE IF EXISTS raw_customers_json;
DROP TABLE IF EXISTS raw_orders_json;



LIST @raw_data_stage;



SELECT
  CHECK_JSON(raw) AS json_check,
  raw
FROM raw_customers_json
WHERE CHECK_JSON(raw) IS NOT NULL;



SELECT * FROM td_customers LIMIT 10;
SELECT * FROM td_orders LIMIT 10;
SELECT * FROM td_order_items LIMIT 10;

SELECT * FROM customer_registration_agg;
SELECT * FROM sales_agg;



SELECT COUNT(*) FROM td_customers;
SELECT COUNT(*) FROM td_orders;
SELECT COUNT(*) FROM td_order_items;

SELECT COUNT(*) FROM raw_customers_json;
SELECT COUNT(*) FROM raw_orders_json;



SHOW DATABASES;
SHOW SCHEMAS IN DATABASE orders_db;
USE DATABASE orders_schema;
USE SCHEMA orders_schema;

SELECT * FROM TABLE(VALIDATE(
  'COPY INTO raw_customers_json FROM @raw_data_stage/customers.json FILE_FORMAT = (FORMAT_NAME = ''json_file_format'')'
));

